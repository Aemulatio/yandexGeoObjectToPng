"use strict";

const Draw = (geoObject, canvasId = "canvas_" + Math.random().toString(36).substring(2, 7), download = false) => {
  if (!geoObject || !geoObject.geometry) return;
  console.log(geoObject.geometry);
  console.log(typeof geoObject.geometry?.getPixelGeometry());
  console.log("getPixelGeometry" in geoObject.geometry);
  if (!("getPixelGeometry" in geoObject.geometry)) return;
  // const type = geoObject.geometry.getType();
  const pixelBounds = geoObject.geometry?.getPixelGeometry().getBounds();
  // const bounds = geoObject.geometry?.getBounds();

  // console.log(pixelBounds);

  // const createMap = (bounds) => {
  // 	const mapContainer = document.createElement("div");
  // 	const id = "TEMP";//TODO: add uniq id
  // 	mapContainer.setAttribute("id", id);
  // 	mapContainer.style.width = "500px";
  // 	mapContainer.style.height = "500px";
  // 	document.body.appendChild(mapContainer);
  // 	return [new ymaps.Map(id, {
  // 		bounds
  // 	}), mapContainer]
  // }
  //
  // const [newMap, mapContainer] = createMap(bounds);
  // newMap.geoObjects.add(geoObject);

  const createCanvas = canvasId => {
    const canvas = document.createElement("canvas");
    canvas.setAttribute("id", canvasId);
    document.body.appendChild(canvas);
    return canvas;
  };
  if (!pixelBounds) return;
  const deltaX = Math.min(pixelBounds[0][0], pixelBounds[1][0]);
  const deltaY = Math.min(pixelBounds[0][1], pixelBounds[1][1]);
  const canvas = createCanvas(canvasId);
  const pixelCoordinates = geoObject.geometry?.getPixelGeometry().getCoordinates()[0].map(pt => [pt[0] - deltaX + 10, pt[1] - deltaY + 10]);
  const canvasHeight = Math.round(Math.max(...pixelCoordinates.flatMap(c => c[1])));
  const canvasWidth = Math.round(Math.max(...pixelCoordinates.flatMap(c => c[0])));
  canvas.width = canvasWidth + 10;
  canvas.height = canvasHeight + 10;
  const ctx = canvas.getContext("2d");
  ctx.strokeStyle = geoObject.options.get("strokeColor");
  ctx.lineWidth = Number(geoObject.options.get("strokeWidth"));
  ctx.fillStyle = geoObject.options.get("fillColor");
  console.log(ctx);
  ctx.beginPath();
  ctx.moveTo(pixelCoordinates[0][0], pixelCoordinates[0][1]);
  for (let i = 1; i < pixelCoordinates.length; i++) {
    ctx.lineTo(pixelCoordinates[i][0], pixelCoordinates[i][1]);
  }
  ctx.closePath();
  ctx.stroke();
  ctx.fill();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEcmF3IiwiZ2VvT2JqZWN0IiwiY2FudmFzSWQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJkb3dubG9hZCIsImdlb21ldHJ5IiwiY29uc29sZSIsImxvZyIsImdldFBpeGVsR2VvbWV0cnkiLCJwaXhlbEJvdW5kcyIsImdldEJvdW5kcyIsImNyZWF0ZUNhbnZhcyIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImRlbHRhWCIsIm1pbiIsImRlbHRhWSIsInBpeGVsQ29vcmRpbmF0ZXMiLCJnZXRDb29yZGluYXRlcyIsIm1hcCIsInB0IiwiY2FudmFzSGVpZ2h0Iiwicm91bmQiLCJtYXgiLCJmbGF0TWFwIiwiYyIsImNhbnZhc1dpZHRoIiwid2lkdGgiLCJoZWlnaHQiLCJjdHgiLCJnZXRDb250ZXh0Iiwic3Ryb2tlU3R5bGUiLCJvcHRpb25zIiwiZ2V0IiwibGluZVdpZHRoIiwiTnVtYmVyIiwiZmlsbFN0eWxlIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwiaSIsImxlbmd0aCIsImxpbmVUbyIsImNsb3NlUGF0aCIsInN0cm9rZSIsImZpbGwiXSwic291cmNlcyI6WyIuLi9zcmMvc2NyaXB0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2VvT2JqZWN0IH0gZnJvbSBcInlhbmRleC1tYXBzXCI7XG5cbmNvbnN0IERyYXcgPSAoXG4gIGdlb09iamVjdDogR2VvT2JqZWN0LFxuICBjYW52YXNJZDogc3RyaW5nID0gXCJjYW52YXNfXCIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgNyksXG4gIGRvd25sb2FkOiBib29sZWFuID0gZmFsc2UsXG4pID0+IHtcbiAgaWYgKCFnZW9PYmplY3QgfHwgIWdlb09iamVjdC5nZW9tZXRyeSkgcmV0dXJuO1xuXG4gIGNvbnNvbGUubG9nKGdlb09iamVjdC5nZW9tZXRyeSk7XG4gIGNvbnNvbGUubG9nKHR5cGVvZiBnZW9PYmplY3QuZ2VvbWV0cnk/LmdldFBpeGVsR2VvbWV0cnkoKSk7XG4gIGNvbnNvbGUubG9nKFwiZ2V0UGl4ZWxHZW9tZXRyeVwiIGluIGdlb09iamVjdC5nZW9tZXRyeSk7XG5cbiAgaWYgKCEoXCJnZXRQaXhlbEdlb21ldHJ5XCIgaW4gZ2VvT2JqZWN0Lmdlb21ldHJ5KSkgcmV0dXJuO1xuICAvLyBjb25zdCB0eXBlID0gZ2VvT2JqZWN0Lmdlb21ldHJ5LmdldFR5cGUoKTtcbiAgY29uc3QgcGl4ZWxCb3VuZHMgPSBnZW9PYmplY3QuZ2VvbWV0cnk/LmdldFBpeGVsR2VvbWV0cnkoKS5nZXRCb3VuZHMoKTtcbiAgLy8gY29uc3QgYm91bmRzID0gZ2VvT2JqZWN0Lmdlb21ldHJ5Py5nZXRCb3VuZHMoKTtcblxuICAvLyBjb25zb2xlLmxvZyhwaXhlbEJvdW5kcyk7XG5cbiAgLy8gY29uc3QgY3JlYXRlTWFwID0gKGJvdW5kcykgPT4ge1xuICAvLyBcdGNvbnN0IG1hcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIC8vIFx0Y29uc3QgaWQgPSBcIlRFTVBcIjsvL1RPRE86IGFkZCB1bmlxIGlkXG4gIC8vIFx0bWFwQ29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcbiAgLy8gXHRtYXBDb250YWluZXIuc3R5bGUud2lkdGggPSBcIjUwMHB4XCI7XG4gIC8vIFx0bWFwQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiNTAwcHhcIjtcbiAgLy8gXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1hcENvbnRhaW5lcik7XG4gIC8vIFx0cmV0dXJuIFtuZXcgeW1hcHMuTWFwKGlkLCB7XG4gIC8vIFx0XHRib3VuZHNcbiAgLy8gXHR9KSwgbWFwQ29udGFpbmVyXVxuICAvLyB9XG4gIC8vXG4gIC8vIGNvbnN0IFtuZXdNYXAsIG1hcENvbnRhaW5lcl0gPSBjcmVhdGVNYXAoYm91bmRzKTtcbiAgLy8gbmV3TWFwLmdlb09iamVjdHMuYWRkKGdlb09iamVjdCk7XG5cbiAgY29uc3QgY3JlYXRlQ2FudmFzID0gKGNhbnZhc0lkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYW52YXNJZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgIHJldHVybiBjYW52YXM7XG4gIH07XG5cbiAgaWYgKCFwaXhlbEJvdW5kcykgcmV0dXJuO1xuXG4gIGNvbnN0IGRlbHRhWCA9IE1hdGgubWluKHBpeGVsQm91bmRzWzBdWzBdLCBwaXhlbEJvdW5kc1sxXVswXSk7XG4gIGNvbnN0IGRlbHRhWSA9IE1hdGgubWluKHBpeGVsQm91bmRzWzBdWzFdLCBwaXhlbEJvdW5kc1sxXVsxXSk7XG5cbiAgY29uc3QgY2FudmFzID0gY3JlYXRlQ2FudmFzKGNhbnZhc0lkKTtcblxuICBjb25zdCBwaXhlbENvb3JkaW5hdGVzID0gZ2VvT2JqZWN0Lmdlb21ldHJ5XG4gICAgPy5nZXRQaXhlbEdlb21ldHJ5KClcbiAgICAuZ2V0Q29vcmRpbmF0ZXMoKVswXVxuICAgIC5tYXAoKHB0KSA9PiBbcHRbMF0gLSBkZWx0YVggKyAxMCwgcHRbMV0gLSBkZWx0YVkgKyAxMF0pO1xuXG4gIGNvbnN0IGNhbnZhc0hlaWdodCA9IE1hdGgucm91bmQoXG4gICAgTWF0aC5tYXgoLi4ucGl4ZWxDb29yZGluYXRlcy5mbGF0TWFwKChjKSA9PiBjWzFdKSksXG4gICk7XG4gIGNvbnN0IGNhbnZhc1dpZHRoID0gTWF0aC5yb3VuZChcbiAgICBNYXRoLm1heCguLi5waXhlbENvb3JkaW5hdGVzLmZsYXRNYXAoKGMpID0+IGNbMF0pKSxcbiAgKTtcblxuICBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aCArIDEwO1xuICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzSGVpZ2h0ICsgMTA7XG5cbiAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxuICBjdHguc3Ryb2tlU3R5bGUgPSBnZW9PYmplY3Qub3B0aW9ucy5nZXQoXCJzdHJva2VDb2xvclwiKTtcbiAgY3R4LmxpbmVXaWR0aCA9IE51bWJlcihnZW9PYmplY3Qub3B0aW9ucy5nZXQoXCJzdHJva2VXaWR0aFwiKSk7XG4gIGN0eC5maWxsU3R5bGUgPSBnZW9PYmplY3Qub3B0aW9ucy5nZXQoXCJmaWxsQ29sb3JcIik7XG4gIGNvbnNvbGUubG9nKGN0eCk7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4Lm1vdmVUbyhwaXhlbENvb3JkaW5hdGVzWzBdWzBdLCBwaXhlbENvb3JkaW5hdGVzWzBdWzFdKTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IHBpeGVsQ29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjdHgubGluZVRvKHBpeGVsQ29vcmRpbmF0ZXNbaV1bMF0sIHBpeGVsQ29vcmRpbmF0ZXNbaV1bMV0pO1xuICB9XG5cbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguc3Ryb2tlKCk7XG4gIGN0eC5maWxsKCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUVBLE1BQU1BLElBQUksR0FBR0EsQ0FDWEMsU0FBb0IsRUFDcEJDLFFBQWdCLEdBQUcsU0FBUyxHQUFHQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDekVDLFFBQWlCLEdBQUcsS0FBSyxLQUN0QjtFQUNILElBQUksQ0FBQ04sU0FBUyxJQUFJLENBQUNBLFNBQVMsQ0FBQ08sUUFBUSxFQUFFO0VBRXZDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ1QsU0FBUyxDQUFDTyxRQUFRLENBQUM7RUFDL0JDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLE9BQU9ULFNBQVMsQ0FBQ08sUUFBUSxFQUFFRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7RUFD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